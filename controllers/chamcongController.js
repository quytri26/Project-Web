const db = require("../config/db");

// üîπ L·∫•y danh s√°ch nh√¢n vi√™n (th√™m m·ªõi)
exports.getAllNhanVien = (req, res) => {
  const sql = "SELECT id, ho_ten FROM NhanVien ORDER BY ho_ten ASC";
  db.query(sql, (err, result) => {
    if (err) {
      console.error("‚ùå L·ªói khi l·∫•y danh s√°ch nh√¢n vi√™n:", err);
      return res.status(500).json({ message: "L·ªói server" });
    }
    res.json(result);
  });
};

// üìã L·∫•y to√†n b·ªô danh s√°ch ch·∫•m c√¥ng
exports.getAllChamCong = (req, res) => {
  const sql = `
    SELECT cc.*, nv.ho_ten 
    FROM ChamCong cc
    JOIN NhanVien nv ON cc.nhan_vien_id = nv.id
    ORDER BY cc.ngay DESC
  `;
  db.query(sql, (err, result) => {
    if (err) {
      console.error("‚ùå L·ªói khi l·∫•y danh s√°ch ch·∫•m c√¥ng:", err);
      return res.status(500).json({ message: "L·ªói server" });
    }
    res.json(result);
  });
};

// üîç L·∫•y ch·∫•m c√¥ng theo ID
exports.getChamCongById = (req, res) => {
  const { id } = req.params;
  const sql = `
    SELECT cc.*, nv.ho_ten 
    FROM ChamCong cc
    JOIN NhanVien nv ON cc.nhan_vien_id = nv.id
    WHERE cc.id = ?
  `;
  db.query(sql, [id], (err, result) => {
    if (err) {
      console.error("‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu ch·∫•m c√¥ng:", err);
      return res.status(500).json({ message: "L·ªói server" });
    }
    if (result.length === 0) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ch·∫•m c√¥ng" });
    }
    res.json(result[0]);
  });
};

// ‚ûï Th√™m ch·∫•m c√¥ng m·ªõi
exports.addChamCong = (req, res) => {
  const { nhan_vien_id, ngay, gio_vao, gio_ra, so_gio_lam, ghi_chu } = req.body;

  
  const sqlCheck = `
    SELECT * FROM ChamCong
    WHERE nhan_vien_id = ?
      AND ngay = ?
      AND (
        (CAST(? AS TIME) < gio_ra)  -- gi·ªù v√†o m·ªõi < gi·ªù ra c≈©
        AND (CAST(? AS TIME) > gio_vao)  -- gi·ªù ra m·ªõi > gi·ªù v√†o c≈©
      )
  `;

  db.query(sqlCheck, [nhan_vien_id, ngay, gio_vao, gio_ra], (err, existing) => {
    if (err) {
      console.error("‚ùå L·ªói ki·ªÉm tra tr√πng gi·ªù:", err);
      return res.status(500).json({ message: "L·ªói server khi ki·ªÉm tra tr√πng gi·ªù" });
    }

    if (existing.length > 0) {
      const nhanvienQuery = `SELECT ho_ten FROM NhanVien WHERE id = ?`;
      db.query(nhanvienQuery, [nhan_vien_id], (err2, nv) => {
        const name = nv?.[0]?.ho_ten || `ID ${nhan_vien_id}`;
        return res
          .status(400)
          .json({ message: `Ca l√†m vi·ªác c·ªßa nh√¢n vi√™n ${name} b·ªã tr√πng ho·∫∑c l·ªìng th·ªùi gian!` });
      });
      return;
    }

    // 2Ô∏è‚É£ Kh√¥ng tr√πng ‚Üí th√™m m·ªõi
    const sqlInsert = `
      INSERT INTO ChamCong (nhan_vien_id, ngay, gio_vao, gio_ra, so_gio_lam, ghi_chu)
      VALUES (?, ?, ?, ?, ?, ?)
    `;
    db.query(sqlInsert, [nhan_vien_id, ngay, gio_vao, gio_ra, so_gio_lam, ghi_chu], (err, result) => {
      if (err) {
        console.error("‚ùå L·ªói th√™m ch·∫•m c√¥ng:", err);
        return res.status(500).json({ message: "L·ªói khi th√™m ch·∫•m c√¥ng" });
      }
      res.json({ message: "‚úÖ Th√™m ch·∫•m c√¥ng th√†nh c√¥ng!", id: result.insertId });
    });
  });
};


// ‚úèÔ∏è C·∫≠p nh·∫≠t th√¥ng tin ch·∫•m c√¥ng

exports.updateChamCong = (req, res) => {
  const { id } = req.params;
  const { nhan_vien_id, ngay, gio_vao, gio_ra, so_gio_lam, ghi_chu } = req.body;

  
  const sqlCheck = `
    SELECT * FROM ChamCong
    WHERE nhan_vien_id = ?
      AND ngay = ?
      AND id <> ?  -- lo·∫°i tr·ª´ b·∫£n ghi hi·ªán t·∫°i
      AND (
        (CAST(? AS TIME) < gio_ra)
        AND (CAST(? AS TIME) > gio_vao)
      )
  `;

  db.query(sqlCheck, [nhan_vien_id, ngay, gio_vao, gio_ra, id], (err, existing) => {
    if (err) {
      console.error("‚ùå L·ªói ki·ªÉm tra tr√πng gi·ªù khi c·∫≠p nh·∫≠t:", err);
      return res.status(500).json({ message: "L·ªói server khi ki·ªÉm tra tr√πng gi·ªù" });
    }

    // N·∫øu ph√°t hi·ªán ca tr√πng
    if (existing.length > 0) {
      const nhanvienQuery = `SELECT ho_ten FROM NhanVien WHERE id = ?`;
      db.query(nhanvienQuery, [nhan_vien_id], (err2, nv) => {
        const name = nv?.[0]?.ho_ten || `ID ${nhan_vien_id}`;
        return res
          .status(400)
          .json({ message: `‚ùå Ca l√†m vi·ªác c·ªßa nh√¢n vi√™n ${name} b·ªã tr√πng ho·∫∑c l·ªìng th·ªùi gian!` });
      });
      return;
    }

    // 2Ô∏è‚É£ Kh√¥ng tr√πng ‚Üí c·∫≠p nh·∫≠t b√¨nh th∆∞·ªùng
    const sqlUpdate = `
      UPDATE ChamCong
      SET nhan_vien_id = ?, ngay = ?, gio_vao = ?, gio_ra = ?, so_gio_lam = ?, ghi_chu = ?
      WHERE id = ?
    `;
    db.query(sqlUpdate, [nhan_vien_id, ngay, gio_vao, gio_ra, so_gio_lam, ghi_chu, id], (err, result) => {
      if (err) {
        console.error("‚ùå L·ªói c·∫≠p nh·∫≠t ch·∫•m c√¥ng:", err);
        return res.status(500).json({ message: "L·ªói server khi c·∫≠p nh·∫≠t ch·∫•m c√¥ng" });
      }
      if (result.affectedRows === 0) {
        return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b·∫£n ghi ch·∫•m c√¥ng c·∫ßn c·∫≠p nh·∫≠t!" });
      }
      res.json({ message: "‚úÖ C·∫≠p nh·∫≠t ch·∫•m c√¥ng th√†nh c√¥ng!" });
    });
  });
};

// üóëÔ∏è X√≥a b·∫£n ghi ch·∫•m c√¥ng
exports.deleteChamCong = (req, res) => {
  const { id } = req.params;
  const sql = "DELETE FROM ChamCong WHERE id = ?";
  db.query(sql, [id], (err, result) => {
    if (err) {
      console.error("‚ùå L·ªói khi x√≥a ch·∫•m c√¥ng:", err);
      return res.status(500).json({ message: "L·ªói server" });
    }
    if (result.affectedRows === 0) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b·∫£n ghi ƒë·ªÉ x√≥a!" });
    }
    res.json({ message: "‚úÖ X√≥a ch·∫•m c√¥ng th√†nh c√¥ng!" });
  });
};

// üìä L·ªçc b·∫£ng ch·∫•m c√¥ng theo th√°ng ho·∫∑c nh√¢n vi√™n
exports.filterChamCong = (req, res) => {
  const { month, year, nhanvien } = req.query;

  let sql = `
    SELECT cc.*, nv.ho_ten
    FROM ChamCong cc
    JOIN NhanVien nv ON cc.nhan_vien_id = nv.id
    WHERE 1=1
  `;
  const params = [];

  if (month && year) {
    sql += " AND MONTH(cc.ngay) = ? AND YEAR(cc.ngay) = ?";
    params.push(month, year);
  }

  if (nhanvien) {
    sql += " AND nv.id = ?";
    params.push(nhanvien);
  }

  sql += " ORDER BY cc.ngay DESC";

  db.query(sql, params, (err, result) => {
    if (err) {
      console.error("‚ùå L·ªói khi l·ªçc ch·∫•m c√¥ng:", err);
      return res.status(500).json({ message: "L·ªói server" });
    }
    res.json(result);
  });
};

// üìÖ L·∫•y d·ªØ li·ªáu ch·∫•m c√¥ng theo ng√†y
exports.getChamCongByDate = (req, res) => {
  const { date } = req.query;
  if (!date) return res.status(400).json({ message: "Thi·∫øu ng√†y c·∫ßn xem" });

  const sql = `
    SELECT cc.*, nv.ho_ten 
    FROM ChamCong cc
    JOIN NhanVien nv ON cc.nhan_vien_id = nv.id
    WHERE cc.ngay = ?
  `;

  db.query(sql, [date], (err, result) => {
    if (err) {
      console.error("‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu ch·∫•m c√¥ng theo ng√†y:", err);
      return res.status(500).json({ message: "L·ªói server" });
    }
    res.json(result);
  });
};

